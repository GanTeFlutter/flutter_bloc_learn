===============================
🌟 Temel Widget’lar
===============================

🔹 BlocProvider
   → Bir Bloc veya Cubit’i widget tree’ye sağlar.

🔹 MultiBlocProvider
   → Birden fazla Bloc/Cubit’i aynı anda sağlar.
lib/product/init/state_initialize.dart burada veli hocadan alinmis cok guzel bir ornek var


===============================
🎧 Dinleme & Yeniden Oluşturma
===============================

🔹 BlocBuilder
   → Bloc/Cubit’in state’i değiştikçe UI’ı yeniden oluşturur.

🔹 BlocListener
   → State değişimlerini dinler, ama UI’ı yeniden çizmez
     (örn: SnackBar, Navigation).

🔹 MultiBlocListener
   → Birden fazla BlocListener kullanmaya yarar.


===============================
⚡ Hem Dinleyip Hem Çizen
===============================

🔹 BlocConsumer
   → Hem BlocBuilder hem BlocListener işlevini aynı anda yapar.


===============================
🎯 State’e Direkt Erişim
===============================

🔹 BlocSelector
   → State’in sadece belli bir kısmını dinler,
     performans için idealdir.


===============================
📦 Kapsayıcı (Extension Widget’lar)
===============================

🔹 RepositoryProvider
   → Dependency Injection için kullanılır
     (örneğin service class’ları sağlamak).

🔹 MultiRepositoryProvider
   → Birden fazla repository sağlamak için.

RepositoryProvider tek başına bir dependency (servis / repository) oluşturup widget ağacına (context’e) ekler.
MultiRepositoryProvider ise birden fazla repository’yi tek seferde eklemene izin verir.
AuthRepository ve UserRepository context’e eklenir.
Uygulamanın altındaki her widget, bu repository’lere context.read<AuthRepository>() veya context.watch<UserRepository>() ile erişebilir.



bu kısmın bloc çeşitlerini  505,506 örnek içinde farklı senaryolar ile kullacağız 
